// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/zsandibe/command-runner-service/internal/domain"
	entity "github.com/zsandibe/command-runner-service/internal/entity"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateCommand mocks base method.
func (m *MockService) CreateCommand(ctx context.Context, inp *domain.CreateCommandInput) (*entity.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommand", ctx, inp)
	ret0, _ := ret[0].(*entity.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommand indicates an expected call of CreateCommand.
func (mr *MockServiceMockRecorder) CreateCommand(ctx, inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommand", reflect.TypeOf((*MockService)(nil).CreateCommand), ctx, inp)
}

// DeleteCommandById mocks base method.
func (m *MockService) DeleteCommandById(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommandById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommandById indicates an expected call of DeleteCommandById.
func (mr *MockServiceMockRecorder) DeleteCommandById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommandById", reflect.TypeOf((*MockService)(nil).DeleteCommandById), ctx, id)
}

// GetAllCommands mocks base method.
func (m *MockService) GetAllCommands(ctx context.Context) (*[]entity.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCommands", ctx)
	ret0, _ := ret[0].(*[]entity.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCommands indicates an expected call of GetAllCommands.
func (mr *MockServiceMockRecorder) GetAllCommands(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCommands", reflect.TypeOf((*MockService)(nil).GetAllCommands), ctx)
}

// GetCommandById mocks base method.
func (m *MockService) GetCommandById(ctx context.Context, id int) (*entity.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommandById", ctx, id)
	ret0, _ := ret[0].(*entity.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommandById indicates an expected call of GetCommandById.
func (mr *MockServiceMockRecorder) GetCommandById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommandById", reflect.TypeOf((*MockService)(nil).GetCommandById), ctx, id)
}

// GetCommands mocks base method.
func (m *MockService) GetCommands(ctx context.Context, ids []string) (*[]entity.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommands", ctx, ids)
	ret0, _ := ret[0].(*[]entity.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommands indicates an expected call of GetCommands.
func (mr *MockServiceMockRecorder) GetCommands(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommands", reflect.TypeOf((*MockService)(nil).GetCommands), ctx, ids)
}

// StopCommandById mocks base method.
func (m *MockService) StopCommandById(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCommandById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopCommandById indicates an expected call of StopCommandById.
func (mr *MockServiceMockRecorder) StopCommandById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCommandById", reflect.TypeOf((*MockService)(nil).StopCommandById), id)
}
